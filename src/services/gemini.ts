import { storage } from '../utils/storage';

interface GeminiResponse {
  text: string;
  error?: boolean;
  errorDetails?: {
    type: string;
    message: string;
    action?: string;
  };
}

export async function processWithGemini(
  imageData?: string,
  transcript?: string
): Promise<GeminiResponse> {
  try {
    const { geminiKey } = await storage.get(['geminiKey']);
    
    if (!geminiKey) {
      throw new Error('Gemini API key not found. Please add it in settings.');
    }

    let contents: any[] = [];

    // Add text content if available
    if (transcript) {
      contents.push({
        parts: [{
          text: transcript
        }]
      });
    }

    // Add image content if available
    if (imageData) {
      contents.push({
        parts: [
          {
            inlineData: {
              mimeType: 'image/jpeg',
              data: imageData.replace(/^data:image\/[a-z]+;base64,/, '')
            }
          },
          {
            text: 'What do you see in this image? Please provide a detailed analysis.'
          }
        ]
      });
    }
    
    const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${geminiKey}`
      },
      body: JSON.stringify({ contents })
    });

    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error?.message || 'Error processing with Gemini');
    }

    // Extract the response text from Gemini's response format
    const text = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!text) {
      throw new Error('No response generated by Gemini');
    }

    return {
      text,
      error: false
    };
  } catch (error: any) {
    console.error('Error processing with Gemini:', error);
    
    let errorDetails = {
      type: 'UNKNOWN_ERROR',
      message: 'An unexpected error occurred',
      action: 'Please try again or check your connection.'
    };

    if (error.message?.includes('API key')) {
      errorDetails = {
        type: 'API_KEY_ERROR',
        message: 'Invalid or missing API key',
        action: 'Please check your Gemini API key in settings.'
      };
    } else if (error.message?.includes('rate limit')) {
      errorDetails = {
        type: 'RATE_LIMIT',
        message: 'Gemini rate limit exceeded',
        action: 'Please wait a moment before trying again.'
      };
    } else if (error.message?.includes('image')) {
      errorDetails = {
        type: 'IMAGE_ERROR',
        message: 'Invalid or corrupted image data',
        action: 'Please try with a different image.'
      };
    }

    return {
      text: error.message || 'Error processing your request with Gemini',
      error: true,
      errorDetails
    };
  }
}